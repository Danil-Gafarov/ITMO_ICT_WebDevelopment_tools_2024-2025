{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f","text":"<p>\u0413\u0430\u0444\u0430\u0440\u043e\u0432 \u0414\u0430\u043d\u0438\u043b k3343</p>"},{"location":"lab3/","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3: \u0423\u043f\u0430\u043a\u043e\u0432\u043a\u0430 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0432 Docker, \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u041e\u0447\u0435\u0440\u0435\u0434\u0438","text":""},{"location":"lab3/#_1","title":"\u0426\u0435\u043b\u044c:","text":"<p>\u041d\u0430\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u0443\u043f\u0430\u043a\u043e\u0432\u044b\u0432\u0430\u0442\u044c FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0432 Docker, \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440 \u0447\u0435\u0440\u0435\u0437 API \u0438 \u043e\u0447\u0435\u0440\u0435\u0434\u044c.</p>"},{"location":"lab3/#http","title":"\u0412\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u043f\u043e http","text":""},{"location":"lab3/#dockerfile","title":"Dockerfile","text":"<p>\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c Dockerfile \u0434\u043b\u044f \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441 \u043f\u0430\u0440\u0435\u0441\u0435\u0440\u043e\u043c. \u0412 Dockerfile \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u043e\u0431\u0440\u0430\u0437, \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438, \u0441\u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b \u0432 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u0443 \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. Dockerfile \u0441\u0435\u0440\u0432\u0438\u0441\u0430</p> <pre><code># team_finder/Dockerfile\n\nFROM python:3.12-slim\n\nWORKDIR /app\n\n# \u041a\u043e\u043f\u0438\u0440\u0443\u0435\u043c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\n# \u041a\u043e\u043f\u0438\u0440\u0443\u0435\u043c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 app/\nCOPY app/ /app/app/\n\nEXPOSE 8000\n\nCMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n</code></pre> <p>Dockerfile \u043f\u0430\u0440\u0441\u0435\u0440\u0430</p> <pre><code># Dockerfile\n\nFROM python:3.12-slim\n\nWORKDIR /parser\n\n# \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\n# \u041a\u043e\u043f\u0438\u0440\u0443\u0435\u043c \u043a\u043e\u0434\nCOPY main.py .\n\nEXPOSE 8000\n\n# \u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430\nCMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n</code></pre>"},{"location":"lab3/#docker-compose","title":"Docker Compose","text":"<p>\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c docker-compose.yml \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u043e\u043c \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432, \u0432\u043a\u043b\u044e\u0447\u0430\u044e\u0449\u0438\u0445 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u0430\u0440\u0441\u0435\u0440 \u0434\u0430\u043d\u043d\u044b\u0445. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u044b, \u0443\u043a\u0430\u0436\u0438\u0442\u0435 \u043f\u043e\u0440\u0442\u044b \u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043c\u0435\u0436\u0434\u0443 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438. \u041a\u043e\u0434 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430:</p> <pre><code>version: '3.9'\n\nservices:\n  app:\n    build: ./team_finder\n    ports:\n      - \"8000:8000\"\n    depends_on:\n      - db\n    networks:\n      - app-network\n\n  parser:\n    build: ./parser_app\n    ports:\n      - \"8001:8000\"\n    depends_on:\n      - db\n    networks:\n      - app-network\n\n  db:\n    image: postgres:latest\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: postgres\n      POSTGRES_DB: team_finder\n    ports:\n      - \"5432:5432\"\n    networks:\n      - app-network\n\nnetworks:\n  app-network:\n    driver: bridge\n</code></pre>"},{"location":"lab3/#fastapi","title":"\u0412\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u0437 FastAPI","text":"<p>\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0435\u043d\u0434\u043f\u043e\u0438\u043d\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0441 URL \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u043f\u0430\u0440\u0441\u0435\u0440\u0443 (\u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u043e\u043c\u0443 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0435) \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0443.</p> <pre><code>@router.post(\"/parse\")\ndef run_parser(req: ParseRequest):\n    try:\n        parser_url = \"http://parser:8000/parse\"\n        response = requests.post(parser_url, json={\"url\": req.url})\n\n        if response.status_code != 200:\n            raise HTTPException(status_code=500, detail=\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0432\u044b\u0437\u043e\u0432\u0435 \u043f\u0430\u0440\u0441\u0435\u0440\u0430\")\n\n        return {\"parser_response\": response.json()}\n\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"\u041d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u0441\u0432\u044f\u0437\u0430\u0442\u044c\u0441\u044f \u0441 \u043f\u0430\u0440\u0441\u0435\u0440\u043e\u043c: {str(e)}\")\n</code></pre>"},{"location":"lab3/#_2","title":"\u0417\u0430\u043f\u0443\u0441\u043a","text":"<p>\u041f\u043e\u0434\u043d\u0438\u043c\u0435\u043c \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u044b</p> <p></p> <p>\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u043c \u0437\u0430\u043f\u0440\u043e\u0441 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0437\u0430\u043f\u0438\u0441\u0438.</p> <p></p> <p></p>"},{"location":"leetcode/","title":"Leetcodes","text":""},{"location":"leetcode/#_1","title":"\u0414\u043e\u043b\u0433 \u043f\u043e \u043b\u0438\u0442\u043a\u043e\u0434\u0430\u043c","text":"<p>\u0412\u0441\u0435\u0433\u043e \u0431\u044b\u043b\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043e 17 \u0437\u0430\u0434\u0430\u0447 \u0438\u0437 \u0441\u0431\u043e\u0440\u043d\u0438\u043a\u0430. </p> <p></p>"},{"location":"lab1/lab1/","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161 \u2014 FastAPI \u0441\u0435\u0440\u0432\u0438\u0441","text":""},{"location":"lab1/lab1/#_1","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430","text":"<p>\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 FastAPI, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0435\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u043b\u044e\u0434\u0435\u0439 \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u0443. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u043c\u043e\u0433\u0443\u0442:   - \u0421\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0444\u0438\u043b\u0438 \u0441 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c \u043e\u043f\u044b\u0442\u0430, \u043d\u0430\u0432\u044b\u043a\u043e\u0432 \u0438 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043e\u0432   - \u0423\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0441\u0432\u043e\u0438 \u043d\u0430\u0432\u044b\u043a\u0438 \u0441 \u0443\u0440\u043e\u0432\u043d\u0435\u043c \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f   - \u0421\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0435\u043a\u0442\u044b \u0441 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c \u0446\u0435\u043b\u0435\u0439 \u0438 \u0441\u0440\u043e\u043a\u043e\u0432   - \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u044b \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u0438\u0445 \u0440\u043e\u043b\u0435\u0439   - \u0418\u0441\u043a\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u043f\u043e \u043e\u043f\u044b\u0442\u0443 \u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c</p>"},{"location":"lab1/lab1/#_2","title":"\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430","text":""},{"location":"lab1/lab1/#_3","title":"\u0422\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438:","text":"<ul> <li>FastAPI \u2014 \u0434\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 REST API</li> <li>SQLModel \u2014 ORM, \u0441\u0432\u044f\u0437\u044c \u0441 PostgreSQL</li> <li>PostgreSQL \u2014 \u0440\u0435\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u0430\u044f \u0431\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445</li> <li>Alembic \u2014 \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439</li> <li>Pydantic \u2014 \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445/\u0438\u0441\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445</li> <li>Swagger UI \u2014 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435</li> </ul>"},{"location":"lab1/lab1/#_4","title":"\u041c\u043e\u0434\u0435\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0445","text":""},{"location":"lab1/lab1/#1-user","title":"1. <code>User</code>","text":"<ul> <li><code>id</code>: \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440</li> <li><code>email</code>: email \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f</li> <li><code>username</code>: \u0438\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f</li> <li><code>hashed_password</code>: \u0437\u0430\u0445\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c</li> </ul>"},{"location":"lab1/lab1/#2-profile","title":"2. <code>Profile</code>","text":"<ul> <li><code>id</code>: \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440</li> <li><code>user_id</code>: \u0441\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 <code>User</code></li> <li><code>bio</code>: \u043a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435</li> <li><code>experience</code>: \u043e\u043f\u044b\u0442 \u0440\u0430\u0431\u043e\u0442\u044b</li> <li><code>interests</code>: \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u044b</li> <li><code>skills</code>: \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0430\u0432\u044b\u043a\u043e\u0432 (many-to-many \u0447\u0435\u0440\u0435\u0437 <code>ProfileSkill</code>)</li> </ul>"},{"location":"lab1/lab1/#3-skill","title":"3. <code>Skill</code>","text":"<ul> <li><code>id</code>: \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440</li> <li><code>name</code>: \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043d\u0430\u0432\u044b\u043a\u0430 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \"Python\", \"FastAPI\")</li> </ul>"},{"location":"lab1/lab1/#4-profileskill","title":"4. <code>ProfileSkill</code>","text":"<ul> <li><code>profile_id</code>: \u0441\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 <code>Profile</code></li> <li><code>skill_id</code>: \u0441\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 <code>Skill</code></li> <li><code>level</code>: \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f (\u043e\u0442 1 \u0434\u043e 5)</li> </ul>"},{"location":"lab1/lab1/#5-project","title":"5. <code>Project</code>","text":"<ul> <li><code>id</code>: \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440</li> <li><code>title</code>: \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430</li> <li><code>description</code>: \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0439 \u0438 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u0439</li> <li><code>deadline</code>: \u0434\u0430\u0442\u0430 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f</li> <li><code>owner_id</code>: \u0441\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 <code>User</code></li> </ul>"},{"location":"lab1/lab1/#6-teammember-many-to-many-profile-project","title":"6. <code>TeamMember</code> (many-to-many \u043c\u0435\u0436\u0434\u0443 <code>Profile</code> \u0438 <code>Project</code>)","text":"<ul> <li><code>profile_id</code>: \u0441\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 <code>Profile</code></li> <li><code>project_id</code>: \u0441\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 <code>Project</code></li> <li><code>role</code>: \u0440\u043e\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \"Backend Developer\")</li> <li><code>joined_at</code>: \u0434\u0430\u0442\u0430 \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f</li> </ul>"},{"location":"lab1/lab1/#api","title":"\u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b API","text":""},{"location":"lab1/lab1/#_5","title":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b:","text":"\u041c\u0435\u0442\u043e\u0434 \u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 POST <code>/users/</code> \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f POST <code>/profiles/</code> \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0444\u0438\u043b\u044f GET <code>/profiles/</code> \u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0444\u0438\u043b\u0435\u0439 (\u0441 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0435\u0439) GET <code>/profiles/{id}</code> \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043f\u0440\u043e\u0444\u0438\u043b\u0435 POST <code>/projects/</code> \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 POST <code>/team-members/</code> \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442 GET <code>/projects/{id}</code> \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u0438 \u0435\u0433\u043e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u0445"},{"location":"lab1/lab1/#_6","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432","text":""},{"location":"lab1/lab1/#_7","title":"\ud83d\udd39 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f","text":"<pre><code>POST /users/\n{\n  \"email\": \"test@example.com\",\n  \"username\": \"testuser\",\n  \"password\": \"secret\"\n}\n</code></pre>"},{"location":"lab1/lab1/#_8","title":"\ud83d\udd39 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0444\u0438\u043b\u044f","text":"<pre><code>POST /profiles/\n{\n  \"user_id\": 1,\n  \"bio\": \"Python \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\",\n  \"experience\": \"3 \u0433\u043e\u0434\u0430\",\n  \"interests\": \"FastAPI, SQL\",\n  \"skills\": [\n    {\"skill_id\": 1, \"level\": 5},\n    {\"skill_id\": 2, \"level\": 4}\n  ]\n}\n</code></pre>"},{"location":"lab1/lab1/#_9","title":"\ud83d\udd39 \u041f\u043e\u0438\u0441\u043a \u043f\u0440\u043e\u0444\u0438\u043b\u044f \u043f\u043e \u043d\u0430\u0432\u044b\u043a\u0430\u043c","text":"<pre><code>GET /profiles/?skill=python\n</code></pre> <p>\u2192 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0432\u0441\u0435\u0445 \u0441 \u043d\u0430\u0432\u044b\u043a\u043e\u043c Python</p>"},{"location":"lab1/lab1/#_10","title":"\ud83d\udd39 \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442","text":"<pre><code>POST /team-members/\n{\n  \"profile_id\": 1,\n  \"project_id\": 1,\n  \"role\": \"Backend Developer\"\n}\n</code></pre>"},{"location":"lab1/lab1/#_11","title":"\ud83d\udd39 \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0435","text":"<pre><code>GET /projects/1\n</code></pre> <p>\u2192 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043f\u0440\u043e\u0435\u043a\u0442 \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0438 \u0438\u0445 \u0440\u043e\u043b\u044f\u043c\u0438</p>"},{"location":"lab1/practice/","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0438","text":""},{"location":"lab1/practice/#fastapi","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043d\u0430 FastAPI","text":"<p>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 FastApi</p> <p><code>pip install fastapi</code></p> <p>\u041f\u0435\u0440\u0432\u044b\u0439 \u0437\u0430\u043f\u0443\u0441\u043a</p> <pre><code>from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/\")\ndef hello():\n    return \"Hello, [username]!\"\n</code></pre> <p> \u041f\u0435\u0440\u0432\u0430\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f  \u041f\u043e\u0448\u0430\u0433\u043e\u0432\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u043f\u0440\u043e\u0435\u043a\u0442 \u0438 \u043c\u0435\u0442\u043e\u0434\u044b</p> <pre><code>@app.get(\"/warriors_list\")\ndef warriors_list() -&gt; List[Warrior]:\n    return temp_bd\n\n\n@app.get(\"/warrior/{warrior_id}\")\ndef get_warrior(warrior_id: int) -&gt; List[Warrior]:\n    return [w for w in temp_bd if w.get(\"id\") == warrior_id]\n\n\n@app.post(\"/warrior\")\ndef create_warrior(warrior: Warrior) -&gt; TypedDict('Response', {\"status\": int, \"data\": Warrior}):\n    warrior_dict = warrior.model_dump()\n    temp_bd.append(warrior_dict)\n    return {\"status\": 200, \"data\": warrior}\n\n\n@app.delete(\"/warrior/delete/{warrior_id}\")\ndef delete_warrior(warrior_id: int):\n    for i, w in enumerate(temp_bd):\n        if w.get(\"id\") == warrior_id:\n            temp_bd.pop(i)\n            break\n    return {\"status\": 201, \"message\": \"deleted\"}\n\n\n# === Professions ===\n@app.get(\"/professions_list\")\ndef professions_list() -&gt; List[Profession]:\n    return profession_temp_bd\n\n\n@app.get(\"/profession/{profession_id}\")\ndef get_profession(profession_id: int) -&gt; List[Profession]:\n    return [p for p in profession_temp_bd if p.get(\"id\") == profession_id]\n\n\n@app.post(\"/profession\")\ndef create_profession(profession: Profession) -&gt; TypedDict('Response', {\"status\": int, \"data\": Profession}):\n    profession_dict = profession.model_dump()\n    profession_temp_bd.append(profession_dict)\n    return {\"status\": 200, \"data\": profession}\n\n\n@app.delete(\"/profession/delete/{profession_id}\")\ndef delete_profession(profession_id: int):\n    for i, p in enumerate(profession_temp_bd):\n        if p.get(\"id\") == profession_id:\n            profession_temp_bd.pop(i)\n            break\n    return {\"status\": 201, \"message\": \"deleted\"}\n</code></pre> <p></p> <p>\u0422\u0435\u043f\u0435\u0440\u044c \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0432 \u043a\u0430\u043a\u043e\u043c \u0444\u043e\u0440\u043c\u0430\u0442\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u044e\u0442\u0441\u044f \u0438 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0442\u0441\u044f \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u043c\u0435\u0442\u043e\u0434\u0430. </p>"},{"location":"lab1/practice/#sqlmodel-alembic","title":"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0411\u0414, SQLModel \u0438 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 \u0447\u0435\u0440\u0435\u0437 Alembic","text":"<p>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443</p> <p><code>pip install sqlmodel</code></p> <p>\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435</p> <pre><code>from sqlmodel import SQLModel, create_engine, Session\n# \u0421\u0442\u0440\u043e\u043a\u0430 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a PostgreSQL\nDATABASE_URL = \"postgresql://postgres:postgres@localhost:5433/warriors_db\"\nengine = create_engine(DATABASE_URL, echo=True)\ndef init_db():\n    SQLModel.metadata.create_all(engine)\ndef get_session():\n    with Session(engine) as session:\n        yield session\n</code></pre> <p>\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 main.py \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 on_startup \u0441 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u043e\u043c on_event \u0432\u044b\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u0439 \u0432\u043d\u0443\u0442\u0440\u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e, \u0447\u0442\u043e\u0431\u044b \u043e\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0431\u044b\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u044b</p> <pre><code>@app.on_event(\"startup\")\ndef on_startup():\n    init_db()\n</code></pre>"},{"location":"lab1/practice/#env-gitignore","title":"\u041c\u0438\u0433\u0440\u0430\u0446\u0438\u0438, ENV, GitIgnore \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430","text":"<p>\u0414\u043b\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 Alembic \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0435\u0433\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0447\u0435\u0440\u0435\u0437 \u043f\u0430\u043a\u0435\u0442\u043d\u044b\u0439 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440: <code>pip install alembic</code></p> <p>\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u0430 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0447\u0435\u0440\u0435\u0437 \u0432\u044b\u0437\u043e\u0432 alembic init [name] \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435, \u0433\u0434\u0435 [name] \u2014 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u043f\u043a\u0438, \u0445\u0440\u0430\u043d\u044f\u0449\u0435\u0439 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439. \u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u043c \u043f\u0430\u043f\u043a\u0443 \u0441 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u044f\u043c\u0438 \u0438 \u0441\u043e\u043f\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0444\u0430\u0439\u043b\u044b \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a:</p> <p><code>alembic init migrations</code></p> <p>\u041f\u043e\u043b\u0443\u0447\u0438\u043c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0444\u0430\u0439\u043b\u043e\u0432:</p> <p></p> <p>\u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0430\u0441\u044c \u043f\u0430\u043f\u043a\u0430 migrations \u0445\u0440\u0430\u043d\u044f\u0449\u0430\u044f \u0432\u043d\u0443\u0442\u0440\u0438 \u0441\u0435\u0431\u044f \u043f\u0430\u043f\u043a\u0443 \u0441 \u0444\u0430\u0439\u043b\u0430\u043c\u0438 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439 versions, \u0444\u0430\u0439\u043b \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u0411\u0414 env.py \u0438 \u0448\u0430\u0431\u043b\u043e\u043d \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439 script.py.mako. \u0412 \u043a\u043e\u0440\u043d\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0434\u043e\u0431\u0430\u0432\u0438\u043b\u0441\u044f \u0444\u0430\u0439\u043b \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a alembic.ini</p>"},{"location":"lab2/task1/","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162 - \u041f\u043e\u0442\u043e\u043a\u0438. \u041f\u0440\u043e\u0446\u0435\u0441\u0441\u044b. \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c.","text":""},{"location":"lab2/task1/#_1","title":"\u0426\u0435\u043b\u044c:","text":"<p>\u041f\u043e\u043d\u044f\u0442\u044c \u043e\u0442\u043b\u0438\u0447\u0438\u044f \u043f\u043e\u0442\u043e\u043a\u0430\u043c\u0438 \u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438 \u0438 \u043f\u043e\u043d\u044f\u0442\u044c, \u0447\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u0430\u0441\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u0432 Python.</p> <p>\u0420\u0430\u0431\u043e\u0442\u0430 \u043e \u043f\u043e\u0442\u043e\u043a\u0430\u0445, \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u0445 \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430\u043c \u0440\u0430\u0437\u0432\u0438\u0442\u044c \u043d\u0430\u0432\u044b\u043a\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0438 \u0431\u044b\u0441\u0442\u0440\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c, \u0447\u0442\u043e \u0432\u0430\u0436\u043d\u043e \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c\u0438 \u043e\u0431\u044a\u0435\u043c\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439.</p>"},{"location":"lab2/task1/#1-threading-multiprocessing-async-python","title":"\u0417\u0430\u0434\u0430\u0447\u0430 1. \u0420\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u043c\u0435\u0436\u0434\u0443 threading, multiprocessing \u0438 async \u0432 Python","text":"<p>\u0417\u0430\u0434\u0430\u0447\u0430: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0435\u0448\u0430\u0442\u044c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 10000000000000. \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f.</p> <p>Threading \u2014 \u041f\u043e\u0442\u043e\u043a\u0438 1. \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u043e\u043a\u043e\u0432 (threads) \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430. 2. \u041f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f: I/O-bound \u0437\u0430\u0434\u0430\u0447 (\u043e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u0441\u0435\u0442\u0435\u0432\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432, \u0447\u0442\u0435\u043d\u0438\u0435/\u0437\u0430\u043f\u0438\u0441\u044c \u0444\u0430\u0439\u043b\u043e\u0432). 3. \u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435: \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u0430\u044f \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043a\u0430 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430 (GIL) \u043d\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c Python-\u0431\u0430\u0439\u0442\u043a\u043e\u0434 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e \u0432 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043f\u043e\u0442\u043e\u043a\u0430\u0445 \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 CPU-bound \u0437\u0430\u0434\u0430\u0447. 4. \u041f\u0430\u043c\u044f\u0442\u044c: \u041f\u043e\u0442\u043e\u043a\u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u044e\u0442 \u043f\u0430\u043c\u044f\u0442\u044c, \u043f\u0440\u043e\u0449\u0435 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f. 5. \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: threading threading_sum</p> <pre><code>import threading\nimport time\n\nTOTAL = 1_000_000_000\nTHREADS = 4\n\ndef calculate_sum(start, end, result, index):\n    partial_sum = 0\n    for i in range(start, end + 1):\n        partial_sum += i\n    result[index] = partial_sum\n\ndef main():\n    step = TOTAL // THREADS\n    threads = []\n    result = [0] * THREADS\n\n    start_time = time.time()\n\n    for i in range(THREADS):\n        start = i * step + 1\n        end = (i + 1) * step if i != THREADS - 1 else TOTAL\n        thread = threading.Thread(target=calculate_sum, args=(start, end, result, i))\n        threads.append(thread)\n        thread.start()\n\n    for thread in threads:\n        thread.join()\n\n    total_sum = sum(result)\n    end_time = time.time()\n\n    print(f\"Threading: \u0421\u0443\u043c\u043c\u0430 = {total_sum}, \u0432\u0440\u0435\u043c\u044f = {end_time - start_time:.4f} \u0441\u0435\u043a\")\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f Threading: \u0421\u0443\u043c\u043c\u0430 = 500000000500000000, \u0432\u0440\u0435\u043c\u044f = 48.5987 \u0441\u0435\u043a</p> <p>Multiprocessing \u2014 \u041f\u0440\u043e\u0446\u0435\u0441\u0441\u044b 1. \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0421\u043e\u0437\u0434\u0430\u0451\u0442 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b, \u043a\u0430\u0436\u0434\u044b\u0439 \u0441\u043e \u0441\u0432\u043e\u0438\u043c \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u043e\u043c Python \u0438 \u043f\u0430\u043c\u044f\u0442\u044c\u044e. 2. \u041f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f: CPU-bound \u0437\u0430\u0434\u0430\u0447 (\u043c\u0430\u0441\u0441\u0438\u0432\u043d\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f, \u0441\u043b\u043e\u0436\u043d\u044b\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b). 3. \u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u043e: \u041e\u0431\u0445\u043e\u0434\u0438\u0442 GIL, \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e \u043d\u0430 \u0440\u0430\u0437\u043d\u044b\u0445 \u044f\u0434\u0440\u0430\u0445 CPU. 4. \u041f\u0430\u043c\u044f\u0442\u044c: \u041f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u043d\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u044e\u0442 \u043f\u0430\u043c\u044f\u0442\u044c (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u043e\u0447\u0435\u0440\u0435\u0434\u0438, \u043f\u0430\u0439\u043f\u044b \u0438 \u0442.\u043f. \u0434\u043b\u044f \u043e\u0431\u043c\u0435\u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u043c\u0438). 5. \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: multiprocessing</p> <p>multiprocessing_sum.py</p> <pre><code>import multiprocessing\nimport time\n\nTOTAL = 1_000_000_000\nPROCESSES = 4\n\ndef calculate_sum(args):\n    start, end = args\n    partial_sum = 0\n    for i in range(start, end + 1):\n        partial_sum += i\n    return partial_sum\n\ndef main():\n    step = TOTAL // PROCESSES\n    pool_args = []\n\n    start_time = time.time()\n\n    for i in range(PROCESSES):\n        start = i * step + 1\n        end = (i + 1) * step if i != PROCESSES - 1 else TOTAL\n        pool_args.append((start, end))\n\n    with multiprocessing.Pool(PROCESSES) as pool:\n        results = pool.map(calculate_sum, pool_args)\n\n    total_sum = sum(results)\n    end_time = time.time()\n\n    print(f\"Multiprocessing: \u0421\u0443\u043c\u043c\u0430 = {total_sum}, \u0432\u0440\u0435\u043c\u044f = {end_time - start_time:.4f} \u0441\u0435\u043a\")\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f Multiprocessing: \u0421\u0443\u043c\u043c\u0430 = 500000000500000000, \u0432\u0440\u0435\u043c\u044f = 18.2911 \u0441\u0435\u043a</p> <p>Async - \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c 1. \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0441\u043e\u0431\u044b\u0442\u0438\u0439\u043d\u044b\u0439 \u0446\u0438\u043a\u043b (event loop) \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447 \u0431\u0435\u0437 \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043a\u0438. 2. \u041f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f: I/O-bound \u0437\u0430\u0434\u0430\u0447, \u0432\u044b\u0441\u043e\u043a\u043e\u0439 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0432 \u0431\u043e\u043b\u044c\u0448\u043e\u043c \u0447\u0438\u0441\u043b\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441\u0435\u0442\u0435\u0432\u044b\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430). 3. \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u0438\u0437\u043c: \u041d\u0435 \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u0438\u0437\u043c, \u0430 \u043a\u043e\u043e\u043f\u0435\u0440\u0430\u0442\u0438\u0432\u043d\u0430\u044f \u043c\u043d\u043e\u0433\u043e\u0437\u0430\u0434\u0430\u0447\u043d\u043e\u0441\u0442\u044c \u2014 \u0437\u0430\u0434\u0430\u0447\u0438 \u0443\u0441\u0442\u0443\u043f\u0430\u044e\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0440\u0443\u0447\u043d\u0443\u044e. 4. \u041f\u0430\u043c\u044f\u0442\u044c: \u0412\u0441\u0451 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0432 \u043e\u0434\u043d\u043e\u043c \u043f\u043e\u0442\u043e\u043a\u0435, \u043e\u0434\u043d\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438. 5. \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: asyncio</p> <p>async_sum.py</p> <pre><code>import asyncio\nimport time\n\nTOTAL = 1_000_000_000\nTASKS = 4\n\nasync def calculate_sum(start, end):\n    partial_sum = 0\n    for i in range(start, end + 1):\n        partial_sum += i\n    return partial_sum\n\nasync def main():\n    step = TOTAL // TASKS\n    tasks = []\n\n    start_time = time.time()\n\n    for i in range(TASKS):\n        start = i * step + 1\n        end = (i + 1) * step if i != TASKS - 1 else TOTAL\n        task = asyncio.create_task(calculate_sum(start, end))\n        tasks.append(task)\n\n    results = await asyncio.gather(*tasks)\n    total_sum = sum(results)\n    end_time = time.time()\n\n    print(f\"Asyncio: \u0421\u0443\u043c\u043c\u0430 = {total_sum}, \u0432\u0440\u0435\u043c\u044f = {end_time - start_time:.4f} \u0441\u0435\u043a\")\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f Asyncio: \u0421\u0443\u043c\u043c\u0430 = 500000000500000000, \u0432\u0440\u0435\u043c\u044f = 56.0137 \u0441\u0435\u043a</p> <p>Multiprocessing \u2014 \u041b\u0443\u0447\u0448\u0430\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0434\u043b\u044f CPU-bound \u0437\u0430\u0434\u0430\u0447</p> <p>\u041a\u0430\u0436\u0434\u044b\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0432\u043e\u0451 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u044f\u0434\u0440\u043e (\u0435\u0441\u043b\u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e), \u0447\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u0438\u0437\u043c. Python-\u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440 (CPython) \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 GIL (Global Interpreter Lock), \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u0435\u0442 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 Python-\u0431\u0430\u0439\u0442\u043a\u043e\u0434\u0430. multiprocessing \u043e\u0431\u0445\u043e\u0434\u0438\u0442 \u044d\u0442\u043e, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u043d\u0435 \u0434\u0435\u043b\u044f\u0442 GIL.</p>"},{"location":"lab2/task2/","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162 - \u041f\u043e\u0442\u043e\u043a\u0438. \u041f\u0440\u043e\u0446\u0435\u0441\u0441\u044b. \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c.","text":""},{"location":"lab2/task2/#2-","title":"\u0417\u0430\u0434\u0430\u0447\u0430 2. \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p>\u0417\u0430\u0434\u0430\u0447\u0430: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u043e\u0432, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445.</p> <p>\u0411\u0443\u0434\u0435\u043c \u043f\u0430\u0440\u0441\u0438\u0442\u044c 100 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u043f\u043e API \"https://  randomuser.me/api/?results=\"</p>"},{"location":"lab2/task2/#threading","title":"Threading","text":"<pre><code>import requests\nfrom threading import Thread\nfrom config import SITE_URL, CHUNKS, CHUNK_SIZE\nfrom database import User, get_session\n\ndef fetch_and_save():\n    response = requests.get(f\"{SITE_URL}{CHUNK_SIZE}\")\n    data = response.json()[\"results\"]\n\n    users = [{\n        \"email\": item[\"email\"],\n        \"username\": item[\"login\"][\"username\"]\n    } for item in data]\n\n    with get_session() as session:\n        existing_emails = {u.email for u in session.query(User).all()}\n        new_users = [User(**u) for u in users if u[\"email\"] not in existing_emails]\n        session.add_all(new_users)\n        session.commit()\n        print(f\"[Threading] \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u043e: {len(new_users)} \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439\")\n\ndef run_threads():\n    threads = [Thread(target=fetch_and_save) for _ in range(CHUNKS)]\n    start = time.time()\n\n    for t in threads:\n        t.start()\n    for t in threads:\n        t.join()\n\n    end = time.time()\n    print(f\"[Threading] \u0412\u0440\u0435\u043c\u044f: {end - start:.2f} \u0441\u0435\u043a\u0443\u043d\u0434\")\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b</p> <p></p>"},{"location":"lab2/task2/#multiprocess","title":"Multiprocess","text":"<pre><code>import requests\nfrom config import SITE_URL, CHUNKS, CHUNK_SIZE\nfrom database import User, get_session\n\n\ndef fetch_users(_):\n    response = requests.get(f\"{SITE_URL}{CHUNK_SIZE}\")\n    return response.json()[\"results\"]\n\n\ndef save_chunk(data_list):\n    with get_session() as session:\n        for item in data_list:\n            user = {\n                \"email\": item[\"email\"],\n                \"username\": item[\"login\"][\"username\"]\n            }\n            db_user = User(**user)\n            existing = session.query(User).filter(User.email == db_user.email).first()\n            if not existing:\n                session.add(db_user)\n        session.commit()\n\n\ndef run_multiprocessing():\n    with multiprocessing.Pool(2) as pool:\n        all_results = pool.map(fetch_users, range(CHUNKS))\n\n    flat_results = [item for sublist in all_results for item in sublist]\n\n    with get_session() as session:\n        existing_emails = {u.email for u in session.query(User).all()}\n        new_users = [u for u in flat_results if u[\"email\"] not in existing_emails]\n\n        with multiprocessing.Pool(2) as pool:\n            pool.map(save_chunk, [new_users[i::2] for i in range(2)])\n\n    print(f\"[Multiprocessing] \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u043e: {len(new_users)} \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439\")\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b</p> <p></p>"},{"location":"lab2/task2/#async","title":"Async","text":"<pre><code>import asyncio\nimport aiohttp\nfrom config import SITE_URL, CHUNKS, CHUNK_SIZE\nfrom database import User, get_session\n\nasync def fetch(session, url):\n    async with session.get(url) as response:\n        return await response.json()\n\ndef extract_users(data):\n    return [{\n        \"email\": item[\"email\"],\n        \"username\": item[\"login\"][\"username\"]\n    } for item in data[\"results\"] if isinstance(item, dict)]\n\nasync def main():\n    urls = [f\"{SITE_URL}{CHUNK_SIZE}\" for _ in range(CHUNKS)]\n\n    async with aiohttp.ClientSession() as http_session:\n        tasks = [fetch(http_session, url) for url in urls]\n        results = await asyncio.gather(*tasks)\n\n    all_users = []\n    for data in results:\n        all_users.extend(extract_users(data))\n\n    with get_session() as session:\n        existing_emails = {u.email for u in session.query(User).all()}\n        new_users = [User(**u) for u in all_users if u[\"email\"] not in existing_emails]\n\n        session.add_all(new_users)\n        session.commit()\n        print(f\"[Async] \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u043e: {len(new_users)} \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439\")\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b</p> <p></p> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 (100 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439)</p> \u041c\u0435\u0442\u043e\u0434 \u0412\u0440\u0435\u043c\u044f \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 Threading 0.54 \u042d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e \u043f\u0440\u0438 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u0437\u0430\u0434\u0430\u0447 I/O. \u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f, \u043d\u0438\u0437\u043a\u0438\u0435 \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0435 \u0440\u0430\u0441\u0445\u043e\u0434\u044b. Multiprocess 2.98 \u041d\u0435\u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u0435\u043d \u0434\u043b\u044f I/O-\u0437\u0430\u0434\u0430\u0447, \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0435 \u0440\u0430\u0441\u0445\u043e\u0434\u044b \u0434\u0435\u043b\u0430\u044e\u0442 multiprocessing \u0438\u0437\u0431\u044b\u0442\u043e\u0447\u043d\u044b\u043c \u0432 \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435. Async 0.35 \u0411\u044b\u0441\u0442\u0440\u0435\u0435 \u0434\u0440\u0443\u0433\u0438\u0445 \u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u044e \u043b\u0438\u0448\u043d\u0435\u0433\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u043e\u0442\u043e\u043a\u043e\u0432/\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432."}]}